import requests
import json

def call_compliance(otp,csr):
    url = 'https://gw-apic-gov.gazt.gov.sa/e-invoicing/developer-portal/compliance'
    hdrs = {'accept':'application/json','OTP': str(otp),'Accept-Version':'V2'}
    bdy = {'csr':csr}
    x = requests.post(url, json=bdy, headers=hdrs)
    xArr=json.loads(x.text)
    for item in xArr:
        print(f'{item}={xArr[item]}')
        #print(item)

def call_compliance_invoice(csid,secret,jsn):
    url = 'https://gw-apic-gov.gazt.gov.sa/e-invoicing/developer-portal/compliance/invoices'
    #url = 'http://localhost:8000'
    hdrs = {'Accept-Language':'en','Accept-Version':'V2'}
    x = requests.post(url, json=jsn, headers=hdrs,auth=(csid,secret))
    #x = requests.post(url, json=jsn, headers=hdrs)
    #print(x.raise_for_status)
    #print(x.text)
    xArr=json.loads(x.text)
    for item in xArr:
         print(f'{item}={xArr[item]}')
         #print(item)


def call_csid_onboading(csid,secret,jsn):
    url = 'https://gw-apic-gov.gazt.gov.sa/e-invoicing/developer-portal/production/csids'
    #url = 'http://localhost:8000'
    hdrs = {'Accept-Language':'en','Accept-Version':'V2'}
    x = requests.post(url, json=jsn, headers=hdrs,auth=(csid,secret))
    #x = requests.post(url, json=jsn, headers=hdrs)
    #print(x.raise_for_status)
    #print(x.text)
    xArr=json.loads(x.text)
    for item in xArr:
         print(f'{item}={xArr[item]}')
         #print(item)

def call_reporting(csid,secret,jsn):
    url = 'https://gw-apic-gov.gazt.gov.sa/e-invoicing/developer-portal/invoices/reporting/single'
    #url = 'http://localhost:8000'
    hdrs = {'Accept-Language':'en','Accept-Version':'V2','Clearance-Status':'0'}
    x = requests.post(url, json=jsn, headers=hdrs,auth=(csid,secret))
    #x = requests.post(url, json=jsn, headers=hdrs)
    print(x.raise_for_status)
    print(x.text)
    xArr=json.loads(x.text)
    for item in xArr:
         print(f'{item}={xArr[item]}')
         #print(item)

def call_clearance(csid,secret,jsn):
    url = 'https://gw-apic-gov.gazt.gov.sa/e-invoicing/developer-portal/invoices/clearance/single'
    #url = 'http://localhost:8000'
    hdrs = {'Accept-Language':'en','Accept-Version':'V2','Clearance-Status':'0'}
    x = requests.post(url, json=jsn, headers=hdrs,auth=(csid,secret))
    #x = requests.post(url, json=jsn, headers=hdrs)
    print(x.raise_for_status)
    print(x.text)
    xArr=json.loads(x.text)
    for item in xArr:
         print(f'{item}={xArr[item]}')
         #print(item)




if __name__ == "__main__":
    csr='LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ0N6Q0NBYkFDQVFBd1pERUxNQWtHQTFVRUJoTUNVMEV4RmpBVUJnTlZCQXNNRFZKcGVXRmthQ0JDY21GdQpZMmd4RlRBVEJnTlZCQW9NREVGQ1EwUWdUR2x0YVhSbFpERW1NQ1FHQTFVRUF3d2RWRk5VTFRnNE5qUXpNVEUwCk5TMHpNVEl6TkRVMk56ZzVNREF3TURNd1ZqQVFCZ2NxaGtqT1BRSUJCZ1VyZ1FRQUNnTkNBQVIyM2huYXRLSHoKZnpzM1Jic3BhanZZZE9YY0hxcTBNZ3VwYUNkZ0dnWGpPY0NHSlFGN2IrM0srTm5McTBjMTR5S3hKUk1zM2VORgpQeFBjb2FvZGFmbUxvSUhzTUlIcEJna3Foa2lHOXcwQkNRNHhnZHN3Z2Rnd0lRWUpLd1lCQkFHQ054UUNCQlFNCkVscEJWRU5CTFVOdlpHVXRVMmxuYm1sdVp6Q0JzZ1lEVlIwUkJJR3FNSUducElHa01JR2hNVHN3T1FZRFZRUUUKRERJeExWUlRWSHd5TFZSVFZId3pMV1ZrTWpKbU1XUTRMV1UyWVRJdE1URXhPQzA1WWpVNExXUTVZVGhtTVRGbApORFExWmpFZk1CMEdDZ21TSm9tVDhpeGtBUUVNRHpNeE1qTTBOVFkzT0Rrd01EQXdNekVOTUFzR0ExVUVEQXdFCk1URXhNVEVSTUE4R0ExVUVHZ3dJVWxKU1JESTVNamt4SHpBZEJnTlZCQThNRmxKbFlXd2daWE4wWVhSbElHRmoKZEdsMmFYUnBaWE13Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUxxYS9TOG5ydGJJN2I1ckw0N1V4eUJacFpMdgptYkdGa1UwbHhCdG9VSTlPQWlFQXYyR2h1QzZuZTB5a25Bak5FOHNhUmsxWGlrQ1BRZFFEWWgwOGkyRm1TLzQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo='
    jsn='{"invoiceHash":"WI6GNwty4XrTc3P1WrRM1xlhqz9TimXdCLH9sgmj0Sg=","uuid":"8d487816-70b8-4ade-a618-9d620b73814a","invoice":""}'
    csid='TUlJQ01UQ0NBZGVnQXdJQkFnSUdBWVlNQnlIbk1Bb0dDQ3FHU000OUJBTUNNQlV4RXpBUkJnTlZCQU1NQ21WSmJuWnZhV05wYm1jd0hoY05Nak13TWpBeE1EZ3hNRE0wV2hjTk1qZ3dNVE14TWpFd01EQXdXakJrTVFzd0NRWURWUVFHRXdKVFFURVdNQlFHQTFVRUN3d05VbWw1WVdSb0lFSnlZVzVqYURFVk1CTUdBMVVFQ2d3TVFVSkRSQ0JNYVcxcGRHVmtNU1l3SkFZRFZRUUREQjFVVTFRdE9EZzJORE14TVRRMUxUTXhNak0wTlRZM09Ea3dNREF3TXpCV01CQUdCeXFHU000OUFnRUdCU3VCQkFBS0EwSUFCSGJlR2RxMG9mTi9PemRGdXlscU85aDA1ZHdlcXJReUM2bG9KMkFhQmVNNXdJWWxBWHR2N2NyNDJjdXJSelhqSXJFbEV5emQ0MFUvRTl5aHFoMXArWXVqZ2NZd2djTXdEQVlEVlIwVEFRSC9CQUl3QURDQnNnWURWUjBSQklHcU1JR25wSUdrTUlHaE1Uc3dPUVlEVlFRRURESXhMVlJUVkh3eUxWUlRWSHd6TFdWa01qSm1NV1E0TFdVMllUSXRNVEV4T0MwNVlqVTRMV1E1WVRobU1URmxORFExWmpFZk1CMEdDZ21TSm9tVDhpeGtBUUVNRHpNeE1qTTBOVFkzT0Rrd01EQXdNekVOTUFzR0ExVUVEQXdFTVRFeE1URVJNQThHQTFVRUdnd0lVbEpTUkRJNU1qa3hIekFkQmdOVkJBOE1GbEpsWVd3Z1pYTjBZWFJsSUdGamRHbDJhWFJwWlhNd0NnWUlLb1pJemowRUF3SURTQUF3UlFJZ2RDSkhIVjZraDVUd2ROK3E0MTVPSGVwRU5oZ3N6cXZrL1pEUHZGV25uVThDSVFDNERaeHoxY1YxSnUvS242MmwrcEh2V2VaMnc4ODVNK3ZtV0VQZUM0WHhvUT09'
    csid_prod='TUlJRDJ6Q0NBNENnQXdJQkFnSVRid0FBZHFEbUlocXNqcG01Q3dBQkFBQjJvREFLQmdncWhrak9QUVFEQWpCak1SVXdFd1lLQ1pJbWlaUHlMR1FCR1JZRmJHOWpZV3d4RXpBUkJnb0praWFKay9Jc1pBRVpGZ05uYjNZeEZ6QVZCZ29Ka2lhSmsvSXNaQUVaRmdkbGVIUm5ZWHAwTVJ3d0dnWURWUVFERXhOVVUxcEZTVTVXVDBsRFJTMVRkV0pEUVMweE1CNFhEVEl5TURNeU9ERTFORFl6TWxvWERUSXlNRE16TURFMU5EWXpNbG93VFRFTE1Ba0dBMVVFQmhNQ1UwRXhEakFNQmdOVkJBb1RCVXBoY21seU1Sb3dHQVlEVlFRTEV4RktaV1JrWVdnZ1FuSmhibU5vTVRJek5ERVNNQkFHQTFVRUF4TUpNVEkzTGpBdU1DNHhNRll3RUFZSEtvWkl6ajBDQVFZRks0RUVBQW9EUWdBRUQvd2IybGhCdkJJQzhDbm5adm91bzZPelJ5bXltVTlOV1JoSXlhTWhHUkVCQ0VaQjRFQVZyQnVWMnhYaXhZNHFCWWY5ZGRlcnprVzlEd2RvM0lsSGdxT0NBaW93Z2dJbU1JR0xCZ05WSFJFRWdZTXdnWUNrZmpCOE1Sd3dHZ1lEVlFRRURCTXlNakl5TWpNeU5EUTBNelF6YW1abU5ETXlNUjh3SFFZS0NaSW1pWlB5TEdRQkFRd1BNekV3TVRjMU16azNOREF3TURBek1RMHdDd1lEVlFRTURBUXhNREV4TVJFd0R3WURWUVFhREFoVFlXMXdiR1VnUlRFWk1CY0dBMVVFRHd3UVUyRnRjR3hsSUVKMWMzTnBibVZ6Y3pBZEJnTlZIUTRFRmdRVWhXY3NiYkpoakQ1WldPa3dCSUxDK3dOVmZLWXdId1lEVlIwakJCZ3dGb0FVZG1DTSt3YWdyR2RYTlozUG1xeW5LNWsxdFM4d1RnWURWUjBmQkVjd1JUQkRvRUdnUDRZOWFIUjBjRG92TDNSemRHTnliQzU2WVhSallTNW5iM1l1YzJFdlEyVnlkRVZ1Y205c2JDOVVVMXBGU1U1V1QwbERSUzFUZFdKRFFTMHhMbU55YkRDQnJRWUlLd1lCQlFVSEFRRUVnYUF3Z1owd2JnWUlLd1lCQlFVSE1BR0dZbWgwZEhBNkx5OTBjM1JqY213dWVtRjBZMkV1WjI5MkxuTmhMME5sY25SRmJuSnZiR3d2VkZOYVJXbHVkbTlwWTJWVFEwRXhMbVY0ZEdkaGVuUXVaMjkyTG14dlkyRnNYMVJUV2tWSlRsWlBTVU5GTFZOMVlrTkJMVEVvTVNrdVkzSjBNQ3NHQ0NzR0FRVUZCekFCaGg5b2RIUndPaTh2ZEhOMFkzSnNMbnBoZEdOaExtZHZkaTV6WVM5dlkzTndNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd013SndZSkt3WUJCQUdDTnhVS0JCb3dHREFLQmdnckJnRUZCUWNEQWpBS0JnZ3JCZ0VGQlFjREF6QUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUF5Tmh5Y1EzYk5sTEZkT1BscVlUNlJWUVRXZ25LMUdoME5IZGNTWTRQZkMwQ0lRQ1NBdGhYdnY3dGV0VUw2OVdqcDhCeG5MTE13ZXJ4WmhCbmV3by9nRjNFSkE9PQ=='
    secret='5+Ybr6tThusFVo+yN1G4J3RGn5PRwAfgQZqhNzZPTo0='
    secret_prod='f9YRhopN/G7x0TECOY6nKSCHLNYlb5riAHSFPICo4qw='
    jsnArr=json.loads(jsn)
    jsnArr['compliance_request_id']='1234567890123'
    complianceRequestId = {'compliance_request_id':'1234567890123'}

    #call_compliance(123345,csr)
    #call_compliance_invoice(csid,secret,jsnArr)
    #call_csid_onboading(csid,secret,complianceRequestId)
    call_clearance(csid_prod,secret_prod,jsnArr)
    #call_reporting(csid_prod,secret_prod,jsnArr)